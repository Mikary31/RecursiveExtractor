<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RecursiveExtractor</name>
    </assembly>
    <members>
        <member name="T:Microsoft.CST.RecursiveExtractor.ArFile">
            <summary>
             Ar file parser.  Supports SystemV style lookup tables in both 32 and 64 bit mode as well as BSD and GNU formatted .ars.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.ArFile.GetFileEntries(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor)">
            <summary>
            Get the FileEntries contained in the FileEntry representing an Ar file
            </summary>
            <param name="fileEntry">The FileEntry to parse</param>
            <param name="options">The ExtractorOptions</param>
            <param name="governor">The RsourceGovernor to use</param>
            <returns>The FileEntries found.</returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.ArFile.GetFileEntriesAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor)">
            <summary>
            Get the FileEntries contained in the FileEntry representing an Ar file
            </summary>
            <param name="fileEntry">The FileEntry to parse</param>
            <param name="options">The ExtractorOptions</param>
            <param name="governor">The RsourceGovernor to use</param>
            <returns>The FileEntries found.</returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.ArFile.Int64FromBigEndianBytes(System.Byte[])">
            <summary>
            Convert Big Endian bytes to an int 64.
            </summary>
            <param name="value">bytes to convert</param>
            <returns>The value of the int64 or -1 when length of the array is not 8.</returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.ArFile.IntFromBigEndianBytes(System.Byte[])">
            <summary>
            Convert Big Endian bytes to an int 32.
            </summary>
            <param name="value">bytes to convert</param>
            <returns>The value of the int or -1 when length of the array is not 8.</returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.DebArchiveFile">
            <summary>
            Implementation of the Deb Archive format
            See: https://en.wikipedia.org/wiki/Deb_(file_format)#/media/File:Deb_File_Structure.svg
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.DebArchiveFile.GetFileEntries(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor)">
            <summary>
            Enumerate the FileEntries in the given Deb file
            </summary>
            <param name="fileEntry">The Deb file FileEntry</param>
            <param name="options">The ExtractorOptions to use</param>
            <param name="governor">The ResourceGovernor to use</param>
            <returns>The FileEntries found</returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.DebArchiveFile.GetFileEntriesAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor)">
            <summary>
            Enumerate the FileEntries in the given Deb file asynchronously
            </summary>
            <param name="fileEntry">The Deb file FileEntry</param>
            <param name="options">The ExtractorOptions to use</param>
            <param name="governor">The ResourceGovernor to use</param>
            <returns>The FileEntries found</returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.ExtractionStatusCode">
            <summary>
            Status codes for the ExtractToDirectory functions. 
            </summary>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.ExtractionStatusCode.Ok">
            <summary>
            Extraction generally successful.
            </summary>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.ExtractionStatusCode.BadArgument">
            <summary>
            One of the arguments provided was invalid.
            </summary>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.ExtractionStatusCode.Failure">
            <summary>
            There was a critical error extracting.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.#ctor">
            <summary>
            The main Extractor class.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.SetDefaultExtractors">
            <summary>
            Set up the Default Extractors compatible with this platform.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.Unset(Microsoft.CST.RecursiveExtractor.ArchiveFileType)">
            <summary>
            Remove any extractor (if set) for the given ArchiveFileType.
            </summary>
            <param name="targetType">The ArchiveFileType to remove the extractor for.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.SetExtractor(Microsoft.CST.RecursiveExtractor.ArchiveFileType,Microsoft.CST.RecursiveExtractor.Extractors.AsyncExtractorInterface)">
            <summary>
            Set a new Extractor for the given ArchiveFileType.
            </summary>
            <param name="targetType">The ArchiveFileType to assign this extractor to.</param>
            <param name="implementation">The ExtractorImplementation.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ClearExtractors">
            <summary>
            Remove all assigned extractors.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.AreIdentical(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.FileEntry)">
            <summary>
                Check if the two files are identical (i.e. Extraction is a quine)
            </summary>
            <param name="fileEntry1"> </param>
            <param name="fileEntry2"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.IsQuine(Microsoft.CST.RecursiveExtractor.FileEntry)">
            <summary>
                Check if the fileEntry is a quine
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.Extract(System.String,Microsoft.CST.RecursiveExtractor.ExtractorOptions)">
            <summary>
            Extracts files from the `filename` given.
            </summary>
            <param name="filename">The path to the file to extract.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <returns>The FileEntries found.</returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractAsync(System.String,Microsoft.CST.RecursiveExtractor.ExtractorOptions)">
            <summary>
            Extracts files from the `filename` given asynchronously.
            </summary>
            <param name="filename">The path to the file to extract.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <returns>The FileEntries found.</returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractAsync(System.String,System.IO.Stream,Microsoft.CST.RecursiveExtractor.ExtractorOptions)">
            <summary>
            Extract from a Stream asynchronously.
            </summary>
            <param name="filename">The filename to call the Stream.</param>
            <param name="stream">The Stream to parse.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <returns>The FileEntries found.</returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.Extract(System.String,System.IO.Stream,Microsoft.CST.RecursiveExtractor.ExtractorOptions)">
            <summary>
            Extract the Stream given.
            </summary>
            <param name="filename">The filename to use for the stream.</param>
            <param name="stream">The Stream to extract from</param>
            <param name="opts">The Extractor Options to use.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.Extract(System.String,System.Byte[],Microsoft.CST.RecursiveExtractor.ExtractorOptions)">
            <summary>
            Extract from the provided bytes.
            </summary>
            <param name="filename">The filename to use for the root.</param>
            <param name="archiveBytes">The bytes to extract.</param>
            <param name="opts">The Extractor options.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractAsync(System.String,System.Byte[],Microsoft.CST.RecursiveExtractor.ExtractorOptions)">
            <summary>
            Extract from the provided bytes async.
            </summary>
            <param name="filename">The filename to use for the root.</param>
            <param name="archiveBytes">The bytes to extract.</param>
            <param name="opts">The Extractor options.</param>
            <returns>The FileEntrys found.</returns>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.Extractor.Logger">
            <summary>
                Logger for interesting events.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
            Extract asynchronously from a FileEntry.
            </summary>
            <param name="fileEntry">The FileEntry containing the Conteant stream to parse.</param>
            <param name="opts">The ExtractorOptions to use</param>
            <param name="governor">The Resource governor to use (or null to create a new one).</param>
            <returns>The FileEntries found.</returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractToDirectory(System.String,System.String,Microsoft.CST.RecursiveExtractor.ExtractorOptions,System.Boolean)">
            <summary>
            Extract the given file to the given Directory.
            </summary>
            <param name="outputDirectory">The directory to extract under. (Will be created if it does not exist).</param>
            <param name="filename">The filename to call the stream.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <param name="acceptFilters">An optional list of regexes, when set each entry's FullName must match at least one.</param>
            <param name="denyFilters">An optional list of regexes, when set each entry's FullName must match none.</param>
            <param name="printNames">If we should print the filename when writing it out to disc.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractToDirectory(System.String,System.String,System.IO.Stream,Microsoft.CST.RecursiveExtractor.ExtractorOptions,System.Boolean)">
            <summary>
            Extract the given Stream to the given Directory.
            </summary>
            <param name="outputDirectory">The directory to extract under. (Will be created if it does not exist).</param>
            <param name="filename">The filename to call the stream.</param>
            <param name="stream">The Stream to extract.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <param name="acceptFilters">An optional list of regexes, when set each entry's FullName must match at least one.</param>
            <param name="denyFilters">An optional list of regexes, when set each entry's FullName must match none.</param>
            <param name="printNames">If we should print the filename when writing it out to disc.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractToDirectory(System.String,Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,System.Boolean)">
            <summary>
            Extract the given FileEntry to the given Directory.
            </summary>
            <param name="outputDirectory">The directory to extract under. (Will be created if it does not exist).</param>
            <param name="filename">The filename to call the stream.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <param name="acceptFilters">An optional list of regexes, when set each entry's FullName must match at least one.</param>
            <param name="denyFilters">An optional list of regexes, when set each entry's FullName must match none.</param>
            <param name="printNames">If we should print the filename when writing it out to disc.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractToDirectoryAsync(System.String,System.String,Microsoft.CST.RecursiveExtractor.ExtractorOptions,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex},System.Boolean)">
            <summary>
            Extract the given file to the given Directory.
            </summary>
            <param name="outputDirectory">The directory to extract under. (Will be created if it does not exist).</param>
            <param name="filename">The filename to call the stream.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <param name="acceptFilters">An optional list of regexes, when set each entry's FullName must match at least one.</param>
            <param name="denyFilters">An optional list of regexes, when set each entry's FullName must match none.</param>
            <param name="printNames">If we should print the filename when writing it out to disc.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractToDirectoryAsync(System.String,System.String,System.IO.Stream,Microsoft.CST.RecursiveExtractor.ExtractorOptions,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex},System.Boolean)">
            <summary>
            Extract the given Stream to the given Directory asynchronously.
            </summary>
            <param name="outputDirectory">The directory to extract under. (Will be created if it does not exist).</param>
            <param name="filename">The filename to call the stream.</param>
            <param name="stream">The Stream to extract.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <param name="acceptFilters">An optional list of regexes, when set each entry's FullName must match at least one.</param>
            <param name="denyFilters">An optional list of regexes, when set each entry's FullName must match none.</param>
            <param name="printNames">If we should print the filename when writing it out to disc.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.ExtractToDirectoryAsync(System.String,Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex},System.Boolean)">
            <summary>
            Extract the given FileEntry to the given Directory asynchronously.
            </summary>
            <param name="outputDirectory">The directory to extract under. (Will be created if it does not exist).</param>
            <param name="filename">The filename to call the stream.</param>
            <param name="opts">The ExtractorOptions to use.</param>
            <param name="acceptFilters">An optional list of regexes, when set each entry's FullName must match at least one.</param>
            <param name="denyFilters">An optional list of regexes, when set each entry's FullName must match none.</param>
            <param name="printNames">If we should print the filename when writing it out to disc.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
            Extract from a FileEntry.
            </summary>
            <param name="fileEntry">The FileEntry containing the Conteant stream to parse.</param>
            <param name="opts">The ExtractorOptions to use</param>
            <param name="governor">The Resource governor to use (or null to create a new one).</param>
            <returns>The FileEntries found.</returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.ExtractorOptions">
            <summary>
            Holder of options for the Extractor.
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.MemoryStreamCutoff">
            <summary>
            Maximum number of bytes before using a FileStream. Default 100MB
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.EnableTiming">
            <summary>
                Enable timing limit for processing.
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.ExtractSelfOnFail">
            <summary>
                If an archive cannot be extracted return a single file entry for the archive itself.
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.MaxExtractedBytes">
            <summary>
                The maximum number of bytes to extract from the archive and all embedded archives. Set to 0 to
                remove limit. Note that MaxExpansionRatio may also apply. Defaults to 0.
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.MaxExtractedBytesRatio">
            <summary>
                By default, stop extracting if the total number of bytes seen is greater than this multiple of
                the original archive size. Used to avoid denial of service (zip bombs and the like).
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.Timeout">
            <summary>
                If timing is enabled, stop processing after this time span. Used to avoid denial of service
                (zip bombs and the like).
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.BatchSize">
            <summary>
            Batch size to use for parallel
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.Parallel">
            <summary>
            Run in parallel when possible
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.RawExtensions">
            <summary>
            Parse these extensions as raw, don't traverse them.
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.Passwords">
            <summary>
            Passwords to use
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.Recurse">
            <summary>
            Should extraction recurse into archives
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.AllowFilters">
            <summary>
            If set, only return files that match these glob filters
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.DenyFilters">
            <summary>
            If set, don't return any files that match these glob filters
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.ExtractorOptions.FileNamePasses(System.String)">
            <summary>
            If the file name provided should be extracted given the filter arguments in this ExtractorOptions instance
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.BZip2Extractor">
            <summary>
            The implementation for BZip Archives
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.BZip2Extractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.BZip2Extractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an BZip2 file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.BZip2Extractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a BZip2 file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.DebExtractor">
            <summary>
            The Deb Archive extractor implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.DebExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.DebExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a .deb file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.DebExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a .deb file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.DiscCommon">
            <summary>
            Common crawler for some disc formats
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.DiscCommon.DumpLogicalVolumeAsync(DiscUtils.LogicalVolumeInfo,System.String,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,Microsoft.CST.RecursiveExtractor.Extractor,Microsoft.CST.RecursiveExtractor.FileEntry,System.Boolean)">
            <summary>
            Dump the FileEntries from a Logical Volume asynchronously
            </summary>
            <param name="volume">The Volume to dump</param>
            <param name="parentPath">The Path to the parent Disc</param>
            <param name="options">Extractor Options to use</param>
            <param name="governor">Resource Governor to use</param>
            <param name="Context">Extractor context to use</param>
            <param name="parent">The Parent FilEntry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.DiscCommon.DumpLogicalVolume(DiscUtils.LogicalVolumeInfo,System.String,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,Microsoft.CST.RecursiveExtractor.Extractor,Microsoft.CST.RecursiveExtractor.FileEntry,System.Boolean)">
            <summary>
            Dump the FileEntries from a Logical Volume
            </summary>
            <param name="volume">The Volume to dump</param>
            <param name="parentPath">The Path to the parent Disc</param>
            <param name="options">Extractor Options to use</param>
            <param name="governor">Resource Governor to use</param>
            <param name="Context">Extractor context to use</param>
            <param name="parent">The Parent FilEntry</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.ExtractorInterface">
            <summary>
            This interface defines Extract
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.ExtractorInterface.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
            Extract files from a FileEntry
            </summary>
            <param name="fileEntry">The FileEntry to extract from</param>
            <param name="options">The ExtractorOptions to use</param>
            <param name="governor">The ResourceGovernor to use</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.GnuArExtractor">
            <summary>
            The Ar file extractor.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.GnuArExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.GnuArExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an archive file created with GNU ar
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.GnuArExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an archive file created with GNU ar
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.GzipExtractor">
            <summary>
            The Gzip extractor implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.GzipExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.GzipExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an Gzip file contained in fileEntry. Since this function is recursive, even though
                Gzip only supports a single compressed file, that inner file could itself contain multiple others.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.GzipExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an Gzip file contained in fileEntry. Since this function is recursive, even though
                Gzip only supports a single compressed file, that inner file could itself contain multiple others.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.IsoExtractor">
            <summary>
            The ISO disc image extractor implementation.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.IsoExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.IsoExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an ISO file
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.IsoExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an ISO file
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.RarExtractor">
            <summary>
            The RAR Archive extractor implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.RarExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.RarExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a RAR archive
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.RarExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a RAR archive
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.SevenZipExtractor">
            <summary>
            The 7Zip extractor implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.SevenZipExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.SevenZipExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a 7-Zip file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <param name="options">ExtractorOptions for performing the extraction</param>
            <param name="governor">The ResourceGovernor to use.</param>
            <param name="topLevel">Is this the top level archive.</param>
            <returns> Extracted files </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.SevenZipExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a 7-Zip file contained in fileEntry.
            </summary>
            <param name="fileEntry">FileEntry to extract </param>
            <param name="options">ExtractorOptions for performing the extraction</param>
            <param name="governor">The ResourceGovernor to use.</param>
            <param name="topLevel">Is this the top level archive.</param>
            <returns> Extracted files </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.TarExtractor">
            <summary>
            The Tar archive extractor implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.TarExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.TarExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a Tar archive
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.TarExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a Tar archive
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.VhdExtractor">
            <summary>
            The VHD Extractor implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VhdExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VhdExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an a VHD file
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VhdExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an a VHD file
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.VhdxExtractor">
            <summary>
            The VHDX Extractor Implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VhdxExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VhdxExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an a VHDX file
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VhdxExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an a VHDX file
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.VmdkExtractor">
            <summary>
            The VMDK Extractor Implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VmdkExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VmdkExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an a VMDK file
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.VmdkExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an a VMDK file
            </summary>
            <param name="fileEntry"> </param>
            <returns> </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.WimExtractor">
            <summary>
            The WIM Image Extractor Implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.WimExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.WimExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a WIM file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.WimExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts a WIM file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.XzExtractor">
            <summary>
            The XZ Extractor Implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.XzExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.XzExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an zip file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.XzExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an zip file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.Extractors.ZipExtractor">
            <summary>
            The Zip Archive Extraction Implementation
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.ZipExtractor.#ctor(Microsoft.CST.RecursiveExtractor.Extractor)">
            <summary>
            The constructor takes the Extractor context for recursion.
            </summary>
            <param name="context">The Extractor context.</param>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.ZipExtractor.ExtractAsync(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an zip file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.Extractors.ZipExtractor.Extract(Microsoft.CST.RecursiveExtractor.FileEntry,Microsoft.CST.RecursiveExtractor.ExtractorOptions,Microsoft.CST.RecursiveExtractor.ResourceGovernor,System.Boolean)">
            <summary>
                Extracts an zip file contained in fileEntry.
            </summary>
            <param name="fileEntry"> FileEntry to extract </param>
            <returns> Extracted files </returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.FileEntry.#ctor(System.String,System.IO.Stream,Microsoft.CST.RecursiveExtractor.FileEntry,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
                Constructs a FileEntry object from a Stream. If passthroughStream is set to true, and the
                stream is seekable, it will directly use inputStream. If passthroughStream is false or it is
                not seekable, it will copy the full contents of inputStream to a new internal FileStream and
                attempt to reset the position of inputstream. The finalizer for this class Disposes the
                contained Stream.
            </summary>
            <param name="name"> </param>
            <param name="inputStream"> </param>
            <param name="parent"> </param>
            <param name="passthroughStream"> </param>
            <param name="createTime"></param>
            <param name="modifyTime"></param>
            <param name="accessTime"></param>
            <param name="memoryStreamCutoff">Size in bytes for maximum size to back with MemoryStream instead of ephemeral FileStream</param>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.ArchiveType">
            <summary>
            Uses MiniMagic to check the binary signature of the Content and return the detected Archive Type
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.Content">
            <summary>
            The Contents of the File
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.FullPath">
            <summary>
            The Full Path to the File
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.Name">
            <summary>
            The relative path of the file in the Archive.
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.Parent">
            <summary>
            The Parent entry of this File.  For example, the Archive it came from.
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.ParentPath">
            <summary>
            The Path to the parent.
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.DisposeOnFinalize">
            <summary>
            Should the <see cref="P:Microsoft.CST.RecursiveExtractor.FileEntry.Content"/> Stream be disposed when this object is finalized.
            Default: true
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.CreateTime">
            <summary>
            The Creation time of the file or DateTime.MinValue if unavailable
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.ModifyTime">
            <summary>
            The Modify time of the file or DateTime.MinValue if unavailable
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.AccessTime">
            <summary>
            The Access time of the file or DateTime.MinValue if unavailable
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntry.EntryStatus">
            <summary>
            ExtractionStatus metadata.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.FileEntry.Finalize">
            <summary>
            The deconstructor will dispose the <see cref="P:Microsoft.CST.RecursiveExtractor.FileEntry.Content"/> stream if <see cref="P:Microsoft.CST.RecursiveExtractor.FileEntry.DisposeOnFinalize"/> is set.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.FileEntry.FromStreamAsync(System.String,System.IO.Stream,Microsoft.CST.RecursiveExtractor.FileEntry,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Construct a FileEntry from a Stream Asynchronously
            </summary>
            <param name="name">Name of the FileEntry</param>
            <param name="content">The Stream to parse</param>
            <param name="parent">The Parent FileEntry</param>
            <param name="createTime"></param>
            <param name="modifyTime"></param>
            <param name="accessTime"></param>
            <param name="memoryStreamCutoff">Size in bytes for maximum size to back with MemoryStream instead of ephemeral FileStream</param>
            <returns>A FileEntry object holding a Copy of the Stream</returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.FileEntryStatus">
            <summary>
            Status information about the provenance of this <see cref="T:Microsoft.CST.RecursiveExtractor.FileEntry"/>
            </summary>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.FileEntryStatus.Default">
            <summary>
            Status has not been set. Implies no issues.
            </summary>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.FileEntryStatus.FailedFile">
            <summary>
            Indicates that creation of this FileEntry was unsuccessful and <see cref="P:Microsoft.CST.RecursiveExtractor.FileEntry.Content"/> for this FileEntry will be empty.
            </summary>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.FileEntryStatus.FailedArchive">
            <summary>
            Indicates that <see cref="P:Microsoft.CST.RecursiveExtractor.FileEntry.Content"/> stream contains an archive which failed to extract. To have failed archives returned as FileEntries from extractors use <see cref="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.ExtractSelfOnFail"/>.
            </summary>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.FileEntryStatus.EncryptedArchive">
            <summary>
            Indicates that <see cref="P:Microsoft.CST.RecursiveExtractor.FileEntry.Content"/> contains an archive which failed to decrypt. To have encrypted archives returned as FileEntries from extractors use <see cref="P:Microsoft.CST.RecursiveExtractor.ExtractorOptions.ExtractSelfOnFail"/>.
            </summary>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.FileEntryInfo">
            <summary>
            Bag of File data used for Pass Filtering
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.FileEntryInfo.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Construct a FileEntryInfo
            </summary>
            <param name="name"></param>
            <param name="parentPath"></param>
            <param name="size"></param>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntryInfo.Name">
            <summary>
            The Relative Path in the Parent
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntryInfo.ParentPath">
            <summary>
            The Parent Path
            </summary>
        </member>
        <member name="P:Microsoft.CST.RecursiveExtractor.FileEntryInfo.Size">
            <summary>
            The Size of the File
            </summary>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.ArchiveFileType">
            <summary>
                ArchiveTypes are the kinds of archive files that this module can process.
            </summary>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.MiniMagic">
            <summary>
                MiniMagic is a tiny implementation of a file type identifier based on binary signatures.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.MiniMagic.DetectFileType(System.String)">
            <summary>
            Detect the type of a file given its path on disk.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.MiniMagic.DetectFileType(System.IO.Stream)">
            <summary>
            Detect the type of a file given a stream of its contents.
            </summary>
            <param name="fileStream"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.MiniMagic.DetectFileType(Microsoft.CST.RecursiveExtractor.FileEntry)">
            <summary>
                Detects the type of a file given a fileEntry
            </summary>
            <param name="fileEntry"> FileEntry containing the file data. </param>
            <returns>The ArchiveFileType detected</returns>
        </member>
        <member name="T:Microsoft.CST.RecursiveExtractor.ResourceGovernor">
            <summary>
            Class that keeps track of bytes processed and time spent processing. Used to Detect ZipBombs etc.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.ResourceGovernor.#ctor(Microsoft.CST.RecursiveExtractor.ExtractorOptions)">
            <summary>
            Create a governor with the given options.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.ResourceGovernor.CurrentOperationProcessedBytesLeft">
            <summary>
                Stores the number of bytes left before we abort (denial of service).
            </summary>
        </member>
        <member name="F:Microsoft.CST.RecursiveExtractor.ResourceGovernor.GovernorStopwatch">
            <summary>
                Times extraction operations to avoid denial of service.
            </summary>
        </member>
        <member name="M:Microsoft.CST.RecursiveExtractor.ResourceGovernor.CheckResourceGovernor(System.Int64)">
            <summary>
                Checks to ensure we haven't extracted too many bytes, or taken too long. This exists primarily
                to mitigate the risks of quines (archives that contain themselves) and zip bombs (specially
                constructed to expand to huge sizes).
                Ref: https://alf.nu/ZipQuine
            </summary>
            <param name="additionalBytes"> </param>
        </member>
    </members>
</doc>
